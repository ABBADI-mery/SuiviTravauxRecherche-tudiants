/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.EncadrementRecherche;
import beans.Etudiant;
import beans.TravailRecherche;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import services.EncadrementRechercheService;
import services.EtudiantService;
import services.TravailRechercheService;

/**
 *
 * @author pc
 */
public class EncadrementRechercheForm extends javax.swing.JInternalFrame {

    private EncadrementRechercheService ers;
    private TravailRechercheService trs;
    private EtudiantService es;
    private DefaultTableModel model;
    private static EncadrementRechercheForm instance;

    /**
     * Creates new form EncadrementRechercheForm
     */
    private EncadrementRechercheForm() {
        super("Gestion des affectations", true, true, true, true);
        setSize(400, 300);
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        initComponents();
        es = new EtudiantService();
        trs = new TravailRechercheService();
        ers = new EncadrementRechercheService();
        loadEtudiants();
        loadTravaux();
        model = (DefaultTableModel) listeAffectations.getModel();
        load();

    }

    public static EncadrementRechercheForm getInstance() {
        if (instance == null || instance.isClosed()) {
            synchronized (EncadrementRechercheForm.class) { // Synchronisez pour la sécurité des threads
                if (instance == null || instance.isClosed()) {
                    instance = new EncadrementRechercheForm();
                }
            }
        }
        return instance;
    }

    public void load() {

        model.setRowCount(0);
        for (EncadrementRecherche er : ers.findAll()) {
            Etudiant etudiant = er.getEtudiant_id();
            TravailRecherche travail = er.getTravail_id();
            if (etudiant != null && travail != null) {
                model.addRow(new Object[]{etudiant.getNom() + " " + etudiant.getPrenom(), travail.getTitre(), er.getProfesseur()});
            }
        }
    }

    private void loadEtudiants() {
        listeEtudiants.removeAllItems();
        for (Etudiant etudiant : es.findAll()) {
            listeEtudiants.addItem(etudiant.getNom() + " " + etudiant.getPrenom());
        }
    }

    private void loadTravaux() {
        listeTravaux.removeAllItems();
        for (TravailRecherche travail : trs.findAll()) {
            listeTravaux.addItem(travail.getTitre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        listeEtudiants = new javax.swing.JComboBox();
        listeTravaux = new javax.swing.JComboBox();
        txtProfesseur = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listeAffectations = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(218, 235, 247));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Affectation des étudiants aux travaux de recherche :"));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-étudiant-femme-24.png"))); // NOI18N
        jLabel1.setText("    Etudiant :");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-livret-d'épargne-24.png"))); // NOI18N
        jLabel2.setText(" Travail de recherche :");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-professeur-de-chant-30.png"))); // NOI18N
        jLabel3.setText(" Professeur encadrant :");

        listeEtudiants.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        listeTravaux.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtProfesseur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProfesseurActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 204, 51));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-ajouter-16.png"))); // NOI18N
        btnAdd.setText("Ajouter");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(245, 245, 136));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-stylo-16.png"))); // NOI18N
        btnUpdate.setText("Modifier");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-supprimer-16.png"))); // NOI18N
        btnDelete.setText("Supprimer");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(78, 78, 78)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listeTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfesseur, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listeEtudiants, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(209, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listeEtudiants, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel2)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listeTravaux, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtProfesseur, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(216, 235, 246));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des Affectations des Étudiants aux Travaux de Recherche :"));
        jPanel2.setToolTipText("");

        listeAffectations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Etudiant ", "Travail", "Professeur encadrant "
            }
        ));
        listeAffectations.setAlignmentX(0.0F);
        listeAffectations.setAlignmentY(0.0F);
        listeAffectations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listeAffectationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listeAffectations);
        if (listeAffectations.getColumnModel().getColumnCount() > 0) {
            listeAffectations.getColumnModel().getColumn(0).setMinWidth(200);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 213, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String etudiantNomPrenom = (String) listeEtudiants.getSelectedItem();
        String travailTitre = (String) listeTravaux.getSelectedItem();
        String professeur = txtProfesseur.getText();

        // Rechercher l'étudiant correspondant par nom et prénom
        Etudiant etudiantSelectionne = null;
        for (Etudiant etudiant : es.findAll()) {
            if ((etudiant.getNom() + " " + etudiant.getPrenom()).equals(etudiantNomPrenom)) {
                etudiantSelectionne = etudiant;
                break;
            }
        }

        // Rechercher le travail correspondant par titre
        TravailRecherche travailSelectionne = null;
        for (TravailRecherche travail : trs.findAll()) {
            if (travail.getTitre().equals(travailTitre)) {
                travailSelectionne = travail;
                break;
            }
        }

        if (etudiantSelectionne == null || travailSelectionne == null || professeur.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un travail, un étudiant et saisir un nom de professeur.");
            return;
        }

        EncadrementRecherche encadrement = new EncadrementRecherche(travailSelectionne, etudiantSelectionne, professeur);

        if (ers.create(encadrement)) {
            JOptionPane.showMessageDialog(this, "Encadrement ajouté avec succès !");
            load();
        } else {
            JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout de l'encadrement.");
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cet encadrement ?");

        if (response == 0) {
            try {
                int selectedRow = listeAffectations.getSelectedRow();
                if (selectedRow != -1) {
                    EncadrementRecherche encadrement = ers.findAll().get(selectedRow);

                    if (ers.delete(encadrement)) {
                        JOptionPane.showMessageDialog(this, "Suppression réussie !");
                        load();
                    } else {
                        JOptionPane.showMessageDialog(this, "Problème lors de la suppression !");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez sélectionner un encadrement à supprimer.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erreur: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtProfesseurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProfesseurActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_txtProfesseurActionPerformed

    private void listeAffectationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listeAffectationsMouseClicked
        // TODO add your handling code here:
        int selectedRow = listeAffectations.getSelectedRow();
        if (selectedRow != -1) {
            String professeur = (String) listeAffectations.getValueAt(selectedRow, 2); // 2 est l'indice de la colonne "Professeur encadrant"
            txtProfesseur.setText(professeur);
        }

    }//GEN-LAST:event_listeAffectationsMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        int response = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment modifier ce professeur ?");

        if (response == 0) {
            try {
                int selectedRow = listeAffectations.getSelectedRow();
                if (selectedRow != -1) {
                    EncadrementRecherche encadrement = ers.findAll().get(selectedRow); // Récupérer l'objet à partir du tableau

                    // Mettre à jour le professeur uniquement
                    encadrement.setProfesseur(txtProfesseur.getText());

                    if (ers.update(encadrement)) {
                        JOptionPane.showMessageDialog(this, "Mise à jour réussie");
                        load();
                    } else {
                        JOptionPane.showMessageDialog(this, "Problème lors de la mise à jour");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Veuillez sélectionner un encadrement à mettre à jour.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erreur: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listeAffectations;
    private javax.swing.JComboBox listeEtudiants;
    private javax.swing.JComboBox listeTravaux;
    private javax.swing.JTextField txtProfesseur;
    // End of variables declaration//GEN-END:variables

}
